#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Greek SEO Keywords for validation
const GREEK_SEO_KEYWORDS = [
  'Œ¥ŒπŒ∫Œ∑Œ≥œåœÅŒøœÇ Œ±Œ∏ŒÆŒΩŒ±',
  'Œ¥ŒπŒ∫Œ∑Œ≥œåœÅŒøœÇ',
  'ŒΩŒøŒºŒπŒ∫Œ≠œÇ œÖœÄŒ∑œÅŒµœÉŒØŒµœÇ Œ±Œ∏ŒÆŒΩŒ±',
  'ŒºŒ±œÅŒØŒΩŒ± ŒπŒªŒπŒøœçœÉŒπŒΩŒ±',
  'ŒøŒπŒ∫ŒøŒ≥ŒµŒΩŒµŒπŒ±Œ∫œå Œ¥ŒØŒ∫Œ±ŒπŒø',
  'ŒºŒµœÑŒ±ŒΩŒ±œÉœÑŒµœÖœÑŒπŒ∫œå Œ¥ŒØŒ∫Œ±ŒπŒø',
  'œÄŒøŒπŒΩŒπŒ∫œå Œ¥ŒØŒ∫Œ±ŒπŒø',
  'Œ±œÉœÑŒπŒ∫œå Œ¥ŒØŒ∫Œ±ŒπŒø',
  'ŒµœÑŒ±ŒπœÅŒπŒ∫œå Œ¥ŒØŒ∫Œ±ŒπŒø',
  'ŒºŒµœÑŒ±œÜœÅŒ¨œÉŒµŒπœÇ',
  'ŒµœÄŒπŒ∫œÖœÅœéœÉŒµŒπœÇ',
  'Œ¥ŒπŒ±Œ∂œçŒ≥ŒπŒ±',
  'ŒµœÄŒπŒºŒ≠ŒªŒµŒπŒ±',
  'Œ¥ŒπŒ±œÑœÅŒøœÜŒ≠œÇ',
  'Œ¥ŒπŒ±Œ∏ŒÆŒ∫ŒµœÇ',
  'Œ¨Œ¥ŒµŒπŒµœÇ Œ¥ŒπŒ±ŒºŒøŒΩŒÆœÇ',
  'golden visa',
  'ŒπŒ∏Œ±Œ≥Œ≠ŒΩŒµŒπŒ±',
  'œÄŒøŒπŒΩŒπŒ∫ŒÆ œÖœÄŒµœÅŒ¨œÉœÄŒπœÉŒ∑',
  'œÄŒªŒ∑ŒºŒºŒµŒªŒÆŒºŒ±œÑŒ±',
  'Œ∫Œ±Œ∫ŒøœÖœÅŒ≥ŒÆŒºŒ±œÑŒ±',
  'Œ±œÄŒøŒ∂Œ∑ŒºŒπœéœÉŒµŒπœÇ',
  'œÉœÖŒºŒ≤œåŒªŒ±ŒπŒ±',
  'Œ±Œ¥ŒπŒ∫ŒøœÄœÅŒ±ŒæŒØŒµœÇ',
  'ŒØŒ¥œÅœÖœÉŒ∑ ŒµœÑŒ±ŒπœÅŒµŒπœéŒΩ',
  'ŒµŒºœÄŒøœÅŒπŒ∫Œ≠œÇ œÉœÖŒºŒ≤Œ¨œÉŒµŒπœÇ'
];

// Required meta tags for Greek SEO
const REQUIRED_META_TAGS = [
  'title',
  'description',
  'keywords',
  'robots',
  'language',
  'geo.region',
  'geo.placename',
  'geo.position'
];

// Required Open Graph tags
const REQUIRED_OG_TAGS = [
  'og:title',
  'og:description',
  'og:url',
  'og:image',
  'og:type',
  'og:locale'
];

// Required Twitter tags
const REQUIRED_TWITTER_TAGS = [
  'twitter:card',
  'twitter:title',
  'twitter:description',
  'twitter:url',
  'twitter:image'
];

// Required structured data types
const REQUIRED_STRUCTURED_DATA = [
  'LocalBusiness',
  'LegalService',
  'Person',
  'FAQPage'
];

function checkGreekSEO() {
  console.log('üîç Checking Greek SEO optimization...\n');

  // Check index.html
  const indexPath = path.join(__dirname, '../index.html');
  if (fs.existsSync(indexPath)) {
    const indexContent = fs.readFileSync(indexPath, 'utf8');
    checkIndexHTML(indexContent);
  } else {
    console.log('‚ùå index.html not found');
  }

  // Check sitemap
  const sitemapPath = path.join(__dirname, '../public/sitemap.xml');
  if (fs.existsSync(sitemapPath)) {
    const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
    checkSitemap(sitemapContent);
  } else {
    console.log('‚ùå sitemap.xml not found');
  }

  // Check robots.txt
  const robotsPath = path.join(__dirname, '../public/robots.txt');
  if (fs.existsSync(robotsPath)) {
    const robotsContent = fs.readFileSync(robotsPath, 'utf8');
    checkRobotsTxt(robotsContent);
  } else {
    console.log('‚ùå robots.txt not found');
  }

  // Check SEOHead component
  const seoHeadPath = path.join(__dirname, '../src/components/SEOHead.jsx');
  if (fs.existsSync(seoHeadPath)) {
    const seoHeadContent = fs.readFileSync(seoHeadPath, 'utf8');
    checkSEOHead(seoHeadContent);
  } else {
    console.log('‚ùå SEOHead.jsx not found');
  }

  // Check HomePage component
  const homePagePath = path.join(__dirname, '../src/pages/HomePage.jsx');
  if (fs.existsSync(homePagePath)) {
    const homePageContent = fs.readFileSync(homePagePath, 'utf8');
    checkHomePage(homePageContent);
  } else {
    console.log('‚ùå HomePage.jsx not found');
  }

  // Check Greek translations
  const translationsPath = path.join(__dirname, '../src/locales/el/translations.json');
  if (fs.existsSync(translationsPath)) {
    const translationsContent = fs.readFileSync(translationsPath, 'utf8');
    checkGreekTranslations(translationsContent);
  } else {
    console.log('‚ùå Greek translations not found');
  }

  console.log('\n‚úÖ Greek SEO check completed!');
}

function checkIndexHTML(content) {
  console.log('üìÑ Checking index.html...');

  // Check for Greek language declaration
  if (content.includes('lang="el"')) {
    console.log('‚úÖ Greek language declaration found');
  } else {
    console.log('‚ùå Greek language declaration missing');
  }

  // Check for required meta tags
  REQUIRED_META_TAGS.forEach(tag => {
    if (content.includes(`name="${tag}"`) || content.includes(`name='${tag}'`)) {
      console.log(`‚úÖ Meta tag ${tag} found`);
    } else {
      console.log(`‚ùå Meta tag ${tag} missing`);
    }
  });

  // Check for Open Graph tags
  REQUIRED_OG_TAGS.forEach(tag => {
    if (content.includes(`property="${tag}"`) || content.includes(`property='${tag}'`)) {
      console.log(`‚úÖ Open Graph tag ${tag} found`);
    } else {
      console.log(`‚ùå Open Graph tag ${tag} missing`);
    }
  });

  // Check for Twitter tags
  REQUIRED_TWITTER_TAGS.forEach(tag => {
    if (content.includes(`property="${tag}"`) || content.includes(`property='${tag}'`)) {
      console.log(`‚úÖ Twitter tag ${tag} found`);
    } else {
      console.log(`‚ùå Twitter tag ${tag} missing`);
    }
  });

  // Check for structured data
  REQUIRED_STRUCTURED_DATA.forEach(type => {
    if (content.includes(`"@type": "${type}"`)) {
      console.log(`‚úÖ Structured data ${type} found`);
    } else {
      console.log(`‚ùå Structured data ${type} missing`);
    }
  });

  // Check for Greek keywords
  const foundKeywords = GREEK_SEO_KEYWORDS.filter(keyword => 
    content.toLowerCase().includes(keyword.toLowerCase())
  );
  
  console.log(`‚úÖ Found ${foundKeywords.length}/${GREEK_SEO_KEYWORDS.length} Greek keywords`);
  
  if (foundKeywords.length < GREEK_SEO_KEYWORDS.length * 0.7) {
    console.log('‚ö†Ô∏è  Consider adding more Greek keywords');
  }
}

function checkSitemap(content) {
  console.log('üó∫Ô∏è  Checking sitemap.xml...');

  // Check for Greek URLs
  const greekUrls = [
    '/family',
    '/immigration', 
    '/criminal',
    '/civil',
    '/corporate',
    '/translations',
    '/dikigoros-athina',
    '/nomikes-ypiresies',
    '/metanaftiko-dikaio',
    '/oikogeneiako-dikaio',
    '/poiniko-dikaio'
  ];

  greekUrls.forEach(url => {
    if (content.includes(url)) {
      console.log(`‚úÖ Greek URL ${url} found in sitemap`);
    } else {
      console.log(`‚ùå Greek URL ${url} missing from sitemap`);
    }
  });

  // Check for hreflang tags
  if (content.includes('hreflang="el"')) {
    console.log('‚úÖ Greek hreflang tags found');
  } else {
    console.log('‚ùå Greek hreflang tags missing');
  }
}

function checkRobotsTxt(content) {
  console.log('ü§ñ Checking robots.txt...');

  // Check for sitemap reference
  if (content.includes('Sitemap:')) {
    console.log('‚úÖ Sitemap reference found');
  } else {
    console.log('‚ùå Sitemap reference missing');
  }

  // Check for Greek-specific paths
  const greekPaths = [
    '/dikigoros-athina',
    '/nomikes-ypiresies',
    '/metanaftiko-dikaio',
    '/oikogeneiako-dikaio',
    '/poiniko-dikaio'
  ];

  greekPaths.forEach(path => {
    if (content.includes(`Allow: ${path}`)) {
      console.log(`‚úÖ Greek path ${path} allowed in robots.txt`);
    } else {
      console.log(`‚ùå Greek path ${path} not allowed in robots.txt`);
    }
  });
}

function checkSEOHead(content) {
  console.log('üîß Checking SEOHead component...');

  // Check for Greek SEO functionality
  if (content.includes('addLocalBusinessStructuredData')) {
    console.log('‚úÖ Local business structured data function found');
  } else {
    console.log('‚ùå Local business structured data function missing');
  }

  if (content.includes('updateBreadcrumbStructuredData')) {
    console.log('‚úÖ Breadcrumb structured data function found');
  } else {
    console.log('‚ùå Breadcrumb structured data function missing');
  }

  // Check for Greek path handling
  if (content.includes('/family') && content.includes('/immigration')) {
    console.log('‚úÖ Greek path handling found');
  } else {
    console.log('‚ùå Greek path handling missing');
  }
}

function checkHomePage(content) {
  console.log('üè† Checking HomePage component...');

  // Check for SEOHead import
  if (content.includes('import SEOHead')) {
    console.log('‚úÖ SEOHead import found');
  } else {
    console.log('‚ùå SEOHead import missing');
  }

  // Check for Greek keywords in content
  const foundKeywords = GREEK_SEO_KEYWORDS.filter(keyword => 
    content.toLowerCase().includes(keyword.toLowerCase())
  );
  
  console.log(`‚úÖ Found ${foundKeywords.length}/${GREEK_SEO_KEYWORDS.length} Greek keywords in HomePage`);
  
  // Check for contact information
  if (content.includes('+30-698-336-3775')) {
    console.log('‚úÖ Phone number found');
  } else {
    console.log('‚ùå Phone number missing');
  }

  if (content.includes('ilyushina.law@gmail.com')) {
    console.log('‚úÖ Email found');
  } else {
    console.log('‚ùå Email missing');
  }

  if (content.includes('Œ¶œÖŒªŒÆœÇ 153')) {
    console.log('‚úÖ Address found');
  } else {
    console.log('‚ùå Address missing');
  }
}

function checkGreekTranslations(content) {
  console.log('üá¨üá∑ Checking Greek translations...');

  try {
    const translations = JSON.parse(content);
    
    if (translations.seo) {
      console.log('‚úÖ SEO translations found');
    } else {
      console.log('‚ùå SEO translations missing');
    }

    if (translations.keywords) {
      console.log('‚úÖ Keywords translations found');
    } else {
      console.log('‚ùå Keywords translations missing');
    }

    // Check for specific service translations
    const services = ['family', 'immigration', 'criminal', 'civil', 'corporate', 'translations'];
    services.forEach(service => {
      if (translations.seo && translations.seo[service]) {
        console.log(`‚úÖ ${service} SEO translations found`);
      } else {
        console.log(`‚ùå ${service} SEO translations missing`);
      }
    });

  } catch (error) {
    console.log('‚ùå Invalid JSON in translations file');
  }
}

// Run the check
if (import.meta.url === `file://${process.argv[1]}`) {
  checkGreekSEO();
}

export { checkGreekSEO }; 